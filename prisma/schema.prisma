generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== Enums =====
enum Methodology {
  WATERFALL
  AGILE
  HYBRID
}

enum BacklogStatus {
  TODO
  DOING
  DONE
}

enum ChangeStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
  IMPLEMENTED
}

enum ChangeType {
  SCOPE
  SCHEDULE
  COST
  RISK
  OTHER
}

enum RiskStatus {
  OPEN
  MITIGATING
  CLOSED
}

enum RiskSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum RiskLikelihood {
  RARE
  UNLIKELY
  POSSIBLE
  LIKELY
  ALMOST_CERTAIN
}

enum TimeEntryType {
  BILLABLE
  NON_BILLABLE
}

enum AssignmentStatus {
  PLANNED
  CONFIRMED
  RELEASED
}

enum KPITrend {
  HIGHER_BETTER
  LOWER_BETTER
  NEUTRAL
}

enum BenefitType {
  FINANCIAL
  NON_FINANCIAL
}

enum BenefitStatus {
  PLANNED
  REALIZING
  REALIZED
  ON_HOLD
  CANCELLED
}

enum HealthColor {
  GREEN
  YELLOW
  RED
  GRAY
}

// ===== Core: Portfolio & Program & Project (skeleton) =====
model Portfolio {
  id          String                    @id @default(cuid())
  name        String
  description String?
  programs    Program[]
  projects    Project[]
  health      PortfolioHealthSnapshot[]
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt
}

model Program {
  id          String    @id @default(cuid())
  name        String
  description String?
  portfolioId String
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  projects    Project[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([portfolioId])
}

model Project {
  id          String      @id @default(cuid())
  code        String?     @unique
  name        String
  methodology Methodology
  status      String      @default("PLANNING")
  description String?
  start       DateTime
  finish      DateTime
  programId   String
  program     Program     @relation(fields: [programId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  portfolioId String
  portfolio   Portfolio   @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([programId])
}

model PortfolioHealthSnapshot {
  id          String      @id @default(cuid())
  portfolioId String
  portfolio   Portfolio   @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  date        DateTime    @default(now())
  overall     HealthColor @default(GREEN)
  summary     String?

  @@index([portfolioId, date])
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String?
  resources Resource[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Resource {
  id                 String    @id @default(cuid())
  name               String
  role               String
  costRatePerHour    Decimal?  @db.Decimal(10,2)
  defaultWeeklyHours Int       @default(40)

  
  userId String?
  user   User?      @relation(fields: [userId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
